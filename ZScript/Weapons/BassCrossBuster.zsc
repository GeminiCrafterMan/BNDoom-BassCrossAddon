class BassCrossBuster : BusterBase
{
	action void A_BassCrossTranslate()
	{
		// Cast and null-check the class:
		let bcros = BassCrossPlayer(self);
		if (!bcros)
			return;

		switch (bcros.curStyleType) {
			case BassCrossPlayer.Form_Gold:
				A_OverlayTranslation(OverlayID(), "BCMMGold");
				break;
			case BassCrossPlayer.Form_Silver:
				A_OverlayTranslation(OverlayID(), "BCMMSilver");
				break;
			default:
				A_OverlayTranslation(OverlayID(), "MMNormStyl");
				A_Print("Invalid BassCross type.");
				break;
		}
	}
	// No need for A_SetElementTranslation.
	// No need for A_EmotionCheck.
	action void A_FireChargeShot()
	{
		// Cast and null-check the class:
		let bcros = BassCrossPlayer(self);
		if (!bcros)
			return;

		switch (bcros.curStyleType) {
			case BassCrossPlayer.Form_Gold:
				for (int i; i < 10; i++) {
					A_FireProjectile("MaxChargeBusterTracer", frandom(-4.275, 4.275), 0, 4, 0, 0, frandom(-4.275, 4.275));
				}
				A_StartSound("weapons/gun", CHAN_WEAPON);
				A_Overlay(PSP_FLASH, "Flash");	// Flash layer
				player.SetPSprite(OverlayID(), ResolveState("Fired"));
				return;
			case BassCrossPlayer.Form_Silver:
				A_FireProjectile("HelzRolling", 0, 0, -12);
				A_FireProjectile("HelzRolling", 0, 0, 12);
//				A_Overlay(PSP_FLASH, "SwordBlade");	// Flash layer
				player.SetPSprite(OverlayID(), ResolveState("SwordSwing"));
				return;
			default:
				A_FireProjectile("MaxChargeBusterTracer", frandom(-1.425, 1.425), 0, 4, 0, 0, frandom(-1.425, 1.425));
				A_StartSound("weapons/buster/pew", CHAN_WEAPON);
				A_Overlay(PSP_FLASH, "Flash");	// Flash layer
				player.SetPSprite(OverlayID(), ResolveState("Fired"));
				return;
		}
	}
	Default
	{
		Tag "BassCross Buster";
	}
	States
	{
		Ready:
			NBST A 1 {
				A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER1);	// no need for zoom or reload, he has no styles (he has no grace)
				A_BassCrossTranslate();
			}
			Loop;
		Select:
			TNT1 A 0 A_Overlay(99,"TopLayer");
			TNT1 A 0 A_BassCrossTranslate();
			TNT1 A 0 A_SetInventory("PrimaryCharge", 0);
			NBST A 1 A_Raise;
			Loop;
		Charge:
			NBST A 1 A_GiveInventory("PrimaryCharge", 1);
			NBST A 0 A_Refire("Charge");
			NBST A 0 A_JumpIfInventory("PrimaryCharge", 50, "FireChargeShot");
			TNT1 A 0 { return ResolveState("FireNormalShot"); }
		AltFire:
		FireNormalShot:
			NBST A 1 A_SetInventory("PrimaryCharge", 0);
			NBST A 0 A_GiveInventory("Firing", 1);
			NBST B 1 Bright {
				A_FireProjectile("MidChargeBusterTracer", frandom(-4.275, 4.275), 0, 4, 0, 0, frandom(-4.275, 4.275));
				A_FireProjectile("MidChargeBusterTracer", frandom(-4.275, 4.275), 0, 4, 0, 0, frandom(-4.275, 4.275));
				A_FireProjectile("MidChargeBusterTracer", frandom(-4.275, 4.275), 0, 4, 0, 0, frandom(-4.275, 4.275));
				A_StartSound("weapons/gun", CHAN_WEAPON);
				A_Overlay(PSP_FLASH, "Flash");	// Flash layer
			}
			TNT1 A 0 { return ResolveState("Fired"); }
		FireChargeShot:
			NBST A 1 {
				A_SetInventory("PrimaryCharge", 0);
				A_GiveInventory("Firing", 1);
				A_FireChargeShot();
			}
			TNT1 A 0 { return ResolveState("Ready"); }

			// Subroutine for charge effect
		ChargeEffectFunction:
			TNT1 A 1;
			// if charge is full, play fully-charged animation
			TNT1 A 0 A_JumpIfInventory("PrimaryCharge",50,"FullChargeAnim");
			// if charge is starting, play not-charged animation
			TNT1 A 0 A_JumpIfInventory("PrimaryCharge",1,"StartChargeAnim");
			stop;

			//Subroutine for charge sound
		ChargeSoundFunction:
			TNT1 A 1;
			//If charge is full, don't play any sound
			TNT1 A 0 A_JumpIfInventory("PrimaryCharge",50,"ChargeSoundFunction");
			//Upon reaching 99 charge, play the charged sound
			TNT1 A 0 A_JumpIfInventory("PrimaryCharge",49,"ChargeSound3");
			//With 5 or more, stay silent.
			TNT1 A 0 A_JumpIfInventory("PrimaryCharge",4,"ChargeSoundFunction");
			//Upon reaching 3 charge, play chargesound1
			TNT1 A 0 A_JumpIfInventory("PrimaryCharge",3,"ChargeSound2");
			//If there's any charge, restart.
			TNT1 A 0 A_JumpIfInventory("PrimaryCharge",1,"ChargeSoundFunction");
			stop;

		Flash:
			BSFL A 1 Bright A_BassCrossTranslate();
			BCFL ABC 1 Bright A_BassCrossTranslate(); // Triple Buster flash
			Stop;

		Reload:
			NBST A 10 {
				// Cast and null-check the class:
				let bcros = BassCrossPlayer(self);
				if (bcros) {
					switch (bcros.curStyleType) {
						case BassCrossPlayer.Form_Gold:
							bcros.EmotionFace = "BCSFAC";
							bcros.curStyleType = BassCrossPlayer.Form_Silver;
							break;
						case BassCrossPlayer.Form_Silver:
							bcros.EmotionFace = "BCGFAC";
							bcros.curStyleType = BassCrossPlayer.Form_Gold;
							break;
						default:
							break;
					}
				}
			}
	}
}